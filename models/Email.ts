/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * OpenAPI spec version: 6.5.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { EmailAnalysis } from './EmailAnalysis.ts';
import { HttpFile } from '../http/http.ts';

/**
* Email model (also referred to as EmailDto). Represents an email that was received by an inbox. If you want the original SMTP message see the `getRawEmail` endpoint.
*/
export class Email {
    'analysis'?: EmailAnalysis;
    /**
    * List of IDs of attachments found in the email. Use these IDs with the Inbox and Email Controllers to download attachments and attachment meta data such as filesize, name, extension.
    */
    'attachments'?: Array<string>;
    /**
    * List of `BCC` recipients email was addressed to
    */
    'bcc'?: Array<string>;
    /**
    * The body of the email message
    */
    'body'?: string;
    /**
    * A hash signature of the email message
    */
    'bodyMD5Hash'?: string;
    /**
    * List of `CC` recipients email was addressed to
    */
    'cc'?: Array<string>;
    /**
    * Detected character set of the email body such as UTF-8
    */
    'charset'?: string;
    /**
    * When was the email received by MailSlurp
    */
    'createdAt'?: Date;
    /**
    * Who the email was sent from
    */
    'from'?: string;
    'headers'?: { [key: string]: string; };
    /**
    * ID of the email
    */
    'id'?: string;
    /**
    * ID of the inbox that received the email
    */
    'inboxId'?: string;
    /**
    * Was HTML sent in the email body
    */
    'isHTML'?: boolean;
    /**
    * Has the email been viewed ever. This means viewed in the dashboard or requested via the full email entity endpoints
    */
    'read'?: boolean;
    /**
    * The replyTo field on the received email
    */
    'replyTo'?: string;
    /**
    * The subject line of the email message
    */
    'subject'?: string;
    /**
    * Can the email be accessed by organization team members
    */
    'teamAccess'?: boolean;
    /**
    * List of `To` recipients email was addressed to
    */
    'to'?: Array<string>;
    /**
    * When was the email last updated
    */
    'updatedAt'?: Date;
    /**
    * ID of user that email belongs
    */
    'userId'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "analysis",
            "baseName": "analysis",
            "type": "EmailAnalysis",
            "format": ""
        },
        {
            "name": "attachments",
            "baseName": "attachments",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "bcc",
            "baseName": "bcc",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "body",
            "baseName": "body",
            "type": "string",
            "format": ""
        },
        {
            "name": "bodyMD5Hash",
            "baseName": "bodyMD5Hash",
            "type": "string",
            "format": ""
        },
        {
            "name": "cc",
            "baseName": "cc",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "charset",
            "baseName": "charset",
            "type": "string",
            "format": ""
        },
        {
            "name": "createdAt",
            "baseName": "createdAt",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "from",
            "baseName": "from",
            "type": "string",
            "format": ""
        },
        {
            "name": "headers",
            "baseName": "headers",
            "type": "{ [key: string]: string; }",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": "uuid"
        },
        {
            "name": "inboxId",
            "baseName": "inboxId",
            "type": "string",
            "format": "uuid"
        },
        {
            "name": "isHTML",
            "baseName": "isHTML",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "read",
            "baseName": "read",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "replyTo",
            "baseName": "replyTo",
            "type": "string",
            "format": ""
        },
        {
            "name": "subject",
            "baseName": "subject",
            "type": "string",
            "format": ""
        },
        {
            "name": "teamAccess",
            "baseName": "teamAccess",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "to",
            "baseName": "to",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "updatedAt",
            "baseName": "updatedAt",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "userId",
            "baseName": "userId",
            "type": "string",
            "format": "uuid"
        }    ];

    static getAttributeTypeMap() {
        return Email.attributeTypeMap;
    }
    
    public constructor() {
    }
}

